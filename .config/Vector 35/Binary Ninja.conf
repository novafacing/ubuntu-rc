[General]
default_dir=/home/novafacing/hub/ctf/2021tamu/output2/gif/00002180.gif

[assemble]
arch=armv7
text="    push {lr}\n    ldr r1, =number1\n    ldr r0, =prompt\n    bl scanf\n    ldr r1, =number1\n    ldr r4, [r1]\n    mov r5, #2\n    cmp r4, #0\n    bge loop_start\n    \n    rsb r4, r4, #0\n    \nloop_start:\n    mov r0, r4\n    mov r1, r5\n    bl is_a_multiple_of\n    cmp r0, #1\n    beq not_prime\n    \n    add r5, r5, #1\n    cmp r5, r4\n    bge prime\n    \n    b loop_start\n    \nnot_prime:\n    ldr r0, =not_message\n    bl printf\n    \nprime: \n    ldr r0, =message\n    bl printf\n    pop {pc}"

[compile]
arch=x86_64
options=@Variant(\0\0\0\b\0\0\0\x1\0\0\0\x18\0u\0n\0s\0\x61\0\x66\0\x65\0-\0s\0t\0\x61\0\x63\0k\0\0\0\n\0\0\0\0)
text="#define REINTERFACE_PTR_START 0xaaac008\n#define REINTERFACE_PTR 0xaaac000\n\nint main() {}\n\nuint32_t test(uint8_t* arg_0, uint64_t arg_1, uint8_t* arg_2, uint32_t* arg_3) {\n\tint LENGTH_0 = 0x30; // Buffer: arg_2 1\n\n\tchar **reinterfaced_ptr_start = ((char**)(REINTERFACE_PTR_START)); // this points to end\n\tchar **reinterfaced_ptr = ((char**)(REINTERFACE_PTR));\n\tchar *prev = 0;\n\tint i = 0;\n\tuint32_t ret = 0;\n\n\n\n\twhile (prev != *reinterfaced_ptr_start) {\n\t\tprev = *reinterfaced_ptr_start;\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < LENGTH_0) memcpy(&(arg_2)[i], (*reinterfaced_ptr_start)--, 1);\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < 4) memcpy(&((char*)arg_3)[i], (*reinterfaced_ptr_start)--, 1);\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < 4) memcpy(&((char*)&ret)[i], (*reinterfaced_ptr_start)--, 1);\n\n\t\ti++;\n\t}\n\n\treturn ret;\n}"

[disasm]
address=true

[find]
case=false
string=DeT
type=Escaped string

[hex]
color=ascii
contrast=normal
highlight=byte

[script]
history=binaryninja.core_product(), binaryninja.core_serial(), binaryninja.core_product_type(), binaryninja.core_license_count(), binaryninja.core_expires(), print('hehhlo'), bv, bv.open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), "bv =open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", bv, "bv = open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", bv, open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), "nbv = open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", nbv, nbv.has_functions, nbv.functions, nbv.update_analysis_and_wait(), nbv, import csv, csv, "bv.navigate(bv, 0x10eac)", bv.navigate(0x10eac), bv, bv.linear_disassembly, "for f in bv.functions:\n\tfor b in f:\n\t\tfor i in b:\n\t\t\tif 0x10b24 <= i.addr <= 0x10b24:\n\t\t\t\tb.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n", "for f in bv.functions:\n\tfor b in f:\n\t\t\tif b.start <= 0x10b24 <= b.end:\n\t\t\t\tb.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n", "for f in bv.functions:\n\tfor b in f:\n\t\t\tif b.start <= 0x10b24 <= b.end:\n\t\t\t\tg = f.create_graph()\n\t\t\t\tbv.show_graph_report('func', g)\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(b)]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", import os, "bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(b)]", bins, "bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/')]", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", raise, "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= b.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    choice_f = ChoiceField(\"Options\", [\"Yes\", \"Exit\"])\n    get_form_input([\"Get Data\", None, choice_f], \"The options\")\n    if (choice_f.result != 0):\n        exit(1)\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    get_form_input([\"Continue?\", None], \"Options\")\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", input('press enter'), input(), "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    time.sleep(5)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", raw_input(), scriptingprovider.original_stdin, scriptingprovider.original_stdin.read(10), "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    scriptingprovider.original_stdin.read(1)\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    scriptingprovider.original_stdin.read(1)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    scriptingprovider.original_stdin.read(1)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(colors)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and fscanf in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", 0x57fe0+1709, hex(_), 0x80583b6 - 0x8057fe0, hex(0x80583b6 - 0x8057fe0), "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    \"\"\"\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    \"\"\"\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(t))\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    \"\"\"\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    \"\"\"\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(t))\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", 0x8051b26 - 0x8051750, hex(982), 0x8051750 - 0x8048000, hex(_), 0x8054672 - 0x8051d2d, hex(_), 0x80546a0 - 0x8051d70, hex(_), 0x8052146 - 0x8051d70, hex(_), 0x08051d70 - 0x80546a0, hex(_), 0x8054660 - 0x8051d30, hex(_), 0x805245f - 0x8051d30, hex(_), 0x80549c0 - 0x8052459, hex(_), 0x8052090 - 0x8052459, hex(_), 0x0808d310 - 0x0808d270, 0x0808d270 - 0x080549a0, hex(_)

[triage]
recentFile=/home/novafacing/Downloads/flash.bin

[ui]
addressDialogHistory=600bd2, 600be6, 4014d7, 0x600c93, 600b9d, 0x600b53, 0x00000000006009a1, 0x0000000000600861, 0x8048b67, 0x8052ac0, 8052ac0, 0x8052466, 0x8052090, 8052160, 8056f90, 0x8056fb0, 8056fb0, 8057010, 0x806a3a6, 0x80573bb, 0x80546a0, 0x80e09e0, 0x8048000, 0x10a6c, 0x10c54, 0x10e4c, 0x400c7e, 0x400e70, 0x4010ce, 0x401866, 0x1182c, 0x401d20, 0x40184e, 0x4010b6, 0x11128, 0x10e30, 0x400e58, 0x10c38, 0x400c66, 0xd83060, 0x30014e8, 0x30014cc, 30
inputNameHistory=pages, num_pages, do_loading_printout, menu_options, newline, flip_notebook, get_number, add_to_notebook, allocation_ptr, allocation_size, print_flavor, instructions, prompt, do_ret, jump_nullptr, do_view, do_edit, do_free, do_malloc, prompt_options, find_next_available, block_pointer_list, only_returns, jump_zero(???), whether_written_yet, no_partial_err, edit_index_prompt, block_list, size_list, available_list, blocks, sizes, "> ", view_choice, edit_choice, free_choice, malloc_choice, biebz_image, __key_prev, __key_curr, foundFlag, keyArr, keyArrIndex, bgFlag, encoded_flag, fib, some_tm_clones_thing_stub, some_got_thing, some_tm_clones_thing, probably_a_checker
localVariableNameHistory=buf2, buf1, page_index, page_count, buf, page_addr, index, index_to_add_at, menu_choice, rv, view_index, view_index_choice, size_read, edit_index, edit_index_choice, free_index, free_index_choice, request_size, size_buffer, idx, check_rv, original_key_val, div_result, key_arr_idx_times_2, key_idx, key_val, OBJ_ATTR_PTR, baseptr, currptr, n, key_strct, userKey, data_base, data_ptr, this_chr, saved_rbp
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(307 664)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(307 659)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0_dockNesting=true
mainwindow\%3C2560x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\0\x4\0\0\0\x4\0\0\x4\xfd\0\0\x5\x88\0\0\0\x4\0\0\0\x4\0\0\x4\xfd\0\0\x5\x88\0\0\0\0\0\0\0\0\n\0\0\0\0\x4\0\0\0\x4\0\0\x4\xfd\0\0\x5\x88)
mainwindow\%3C2560x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\x1\x33\0\0\x5O\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x5O\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\x2\xb4\0\0\x2\x98\0\0\0\x18\0\xff\xff\xff\0\0\0\x1\0\0\x1+\0\0\x5W\xfc\x2\0\0\0\x4\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x3\xc6\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5W\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0>\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0\x42\0u\0\x66\0\x66\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\0\0\0\x3\0\0\x4\xfa\0\0\0\x97\xfc\x1\0\0\0\x2\xfc\0\0\0\0\0\0\x4\xfa\0\0\0\x46\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfc\0\0\x4\xd3\0\0\0\x97\0\0\0^\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0M\0\x65\0m\0o\0r\0y\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\xff\xff\xff\0\0\x4\xfa\0\0\x4\xb2\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(237 240)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(166 1319)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(166 24)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(237 1121)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0_dockNesting=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\x5\xa0\0\0\x1z\0\0\x13\xf\0\0\a\x6\0\0\x5\xa0\0\0\x1z\0\0\x13\xf\0\0\a\x6\0\0\0\0\0\0\0\0\rp\0\0\x5\xa0\0\0\x1z\0\0\x13\xf\0\0\a\x6)
mainwindow\%3C3440x1440%3A1440x2560%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\xed\0\0\x5W\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x4\x61\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\x1\0\0\x4\x82\0\0\0\xf0\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\0o\0\0\x5W\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\x1\0\0\0\x1b\0\0\x5W\0\0\0\x38\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\x5H\0\0\0\x18\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\f\b\0\0\0\x80\xfc\x1\0\0\0\x1\xfc\0\0\0\xf3\0\0\f\b\0\0\0\x46\0\xff\xff\xff\xfa\0\0\0\0\x1\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x46\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\0\0\f\b\0\0\x4\xd1\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(307 664)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(307 659)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0_dockNesting=true
mainwindow\%3C3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y\0\0\0\0\0\0\0\0\rp\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y)
mainwindow\%3C3440x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\x1\x33\0\0\x5\x31\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x2\x93\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0~\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\x1\0\0\x2\xb4\0\0\x2\x98\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\x1+\0\0\x5W\xfc\x2\0\0\0\x4\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x3\xc6\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5W\0\0\0\x18\0\0\0\x18\xfb\0\0\0>\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0\x42\0u\0\x66\0\x66\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\x5j\0\0\0\x97\xfc\x1\0\0\0\x2\xfc\0\0\x1\x39\0\0\x5j\0\0\0\x46\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfc\0\0\x4\xb5\0\0\0\x97\0\0\0^\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0M\0\x65\0m\0o\0r\0y\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\0\0\x5j\0\0\x4\x94\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(127 416)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(63 2071)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(1259 901)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(63 29)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(3840 931)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(127 1684)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0_dockNesting=true
mainwindow\%3C3840x2160%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43\0\0\0\0\0\0\0\0\xf\0\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43)
mainwindow\%3C3840x2160%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\x7f\0\0\a<\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\0\xbb\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\xdc\0\0\x6{\0\0\0\x18\0\xff\xff\xff\0\0\0\x1\0\0\0?\0\0\a<\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\a\x1b\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\a<\0\0\0\x1b\0\0\0\x18\0\xff\xff\xff\0\0\0\x3\0\0\ak\0\0\x1I\xfc\x1\0\0\0\x1\xfc\0\0\0\0\0\0\ak\0\0\0r\0\xff\xff\xff\xfa\0\0\0\x1\x1\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\xff\xff\xff\0\0\ak\0\0\0\x8e\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
recentFiles=/home/novafacing/hub/ctf/2021tamu/output2/gif/00002180_horiz.gif, /home/novafacing/hub/ctf/2021tamu/output2/gif/00002180.gif, /home/novafacing/hub/ctf/2021tamu/output2/gif/00002180_colortable_and_horiz_mod.gif, /home/novafacing/hub/ctf/2021tamu/output2/gif/00002180_colortable_and_horiz.gif, /home/novafacing/hub/ctf/2021tamu/output2/gif/00002180_colortable.gif, /home/novafacing/hub/ctf/2021utctf/maze.gb, /home/novafacing/hub/ctf/2021utctf/peeb_poob, /home/novafacing/hub/reinterfacing-targets/axtls/_stage/axssl-static, /home/novafacing/hub/reinterfacing-targets/cgc-atoi-binaries/Rejistar, /home/novafacing/hub/reinterfacing-targets/axtls/_stage/axssl-static-patched, /home/novafacing/hub/reinterfacing-targets/axtls/_stage/axssl-static-nomd5_update_pem_decrypt-patched, /home/novafacing/hub/reinterfacing-targets/axtls/_stage/axssl-static-nomd5_update_pem_decrypt, /home/novafacing/hub/ctf/2021dicegang/flippidy/flippidy.c, /home/novafacing/hub/ctf/2021dicegang/flippidy.bndb, /home/novafacing/hub/reinterfacing-targets/ttyd/ttyd/ttyd, /home/novafacing/hub/ctf/2021dicegang/flippidy/flippidy, /home/novafacing/hub/ctf/2021dicegang/sice_sice_baby, /home/novafacing/hub/ctf/hack_demos/fixed.png, /home/novafacing/hub/ctf/hack_demos/broken, /home/novafacing/Downloads/CROMU_00016, /home/novafacing/hub/reinterfacing-targets/axtls/_stage/temp, /home/novafacing/hub/reinterfacing-targets/axtls/_stage/axtls-base64-decode-patched, /home/novafacing/hub/axtls-builder/build/axtls/_stage/axssl, /home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_72-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_72-bad-armv7, /home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_72-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_72-bad-x64, /home/novafacing/hub/ctf/2020hxp/still-printf/still-printf, /home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64, /home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-armv7, /home/novafacing/Downloads/binaryninja/libbinaryninjacore.so.1, /home/novafacing/hub/binaryninja/libbinaryninjacore.so.1, /home/novafacing/hub/research/official-angr/exploit-rehosting/babyrev.out, /home/novafacing/Downloads/broken, /home/novafacing/hub/research/testcase/testcase, /home/novafacing/hub/ctf/2020osusec/great_characters.bin, /home/novafacing/hub/ctf/2020osusec/project_biebz.bndb
stackAdjustSizeHistory=8, 64, 0x0, 0x16, 0x4
typeDialogHistory="struct OBJ_ATTR* ", OBJ_ATTR *, int16_t, int attr0, int16_t attr0, int16_t fill, uint16_t attr2, uint16_t attr1, uint16_t attr0
typeNameHistory=fill, attr2, attr1, attr0
