[General]
default_dir=/tmp/tmpiqooq6u9.json
tagIndex=3

[assemble]
arch=x86_64
text=

[compile]
arch=x86_64
options=@Variant(\0\0\0\b\0\0\0\x1\0\0\0\x18\0u\0n\0s\0\x61\0\x66\0\x65\0-\0s\0t\0\x61\0\x63\0k\0\0\0\n\0\0\0\0)
text="#define REINTERFACE_PTR_START 0xaaac008\n#define REINTERFACE_PTR 0xaaac000\n\nint main() {}\n\nuint32_t test(uint8_t* arg_0, uint64_t arg_1, uint8_t* arg_2, uint32_t* arg_3) {\n\tint LENGTH_0 = 0x30; // Buffer: arg_2 1\n\n\tchar **reinterfaced_ptr_start = ((char**)(REINTERFACE_PTR_START)); // this points to end\n\tchar **reinterfaced_ptr = ((char**)(REINTERFACE_PTR));\n\tchar *prev = 0;\n\tint i = 0;\n\tuint32_t ret = 0;\n\n\n\n\twhile (prev != *reinterfaced_ptr_start) {\n\t\tprev = *reinterfaced_ptr_start;\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < LENGTH_0) memcpy(&(arg_2)[i], (*reinterfaced_ptr_start)--, 1);\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < 4) memcpy(&((char*)arg_3)[i], (*reinterfaced_ptr_start)--, 1);\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < 4) memcpy(&((char*)&ret)[i], (*reinterfaced_ptr_start)--, 1);\n\n\t\ti++;\n\t}\n\n\treturn ret;\n}"

[disasm]
address=true
opcode=true

[find]
all=true
case=true
range=0
string=stuck point
type=Escaped string

[hex]
color=ascii
contrast=normal
highlight=byte

[script]
history=binaryninja.core_product(), binaryninja.core_serial(), binaryninja.core_product_type(), binaryninja.core_license_count(), binaryninja.core_expires(), print('hehhlo'), bv, bv.open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), "bv =open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", bv, "bv = open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", bv, open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), "nbv = open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", nbv, nbv.has_functions, nbv.functions, nbv.update_analysis_and_wait(), nbv, import csv, csv, "bv.navigate(bv, 0x10eac)", bv.navigate(0x10eac), bv, bv.linear_disassembly, "for f in bv.functions:\n\tfor b in f:\n\t\tfor i in b:\n\t\t\tif 0x10b24 <= i.addr <= 0x10b24:\n\t\t\t\tb.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n", "for f in bv.functions:\n\tfor b in f:\n\t\t\tif b.start <= 0x10b24 <= b.end:\n\t\t\t\tb.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n", "for f in bv.functions:\n\tfor b in f:\n\t\t\tif b.start <= 0x10b24 <= b.end:\n\t\t\t\tg = f.create_graph()\n\t\t\t\tbv.show_graph_report('func', g)\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(b)]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", import os, "bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(b)]", bins, "bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/')]", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", raise, "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= b.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    choice_f = ChoiceField(\"Options\", [\"Yes\", \"Exit\"])\n    get_form_input([\"Get Data\", None, choice_f], \"The options\")\n    if (choice_f.result != 0):\n        exit(1)\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    get_form_input([\"Continue?\", None], \"Options\")\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", input('press enter'), input(), "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    time.sleep(5)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", raw_input(), scriptingprovider.original_stdin, scriptingprovider.original_stdin.read(10), "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    scriptingprovider.original_stdin.read(1)\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    scriptingprovider.original_stdin.read(1)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    scriptingprovider.original_stdin.read(1)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(colors)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and fscanf in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", 0x57fe0+1709, hex(_), 0x80583b6 - 0x8057fe0, hex(0x80583b6 - 0x8057fe0), "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    \"\"\"\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    \"\"\"\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(t))\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    \"\"\"\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    \"\"\"\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(t))\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", 0x8051b26 - 0x8051750, hex(982), 0x8051750 - 0x8048000, hex(_), 0x8054672 - 0x8051d2d, hex(_), 0x80546a0 - 0x8051d70, hex(_), 0x8052146 - 0x8051d70, hex(_), 0x08051d70 - 0x80546a0, hex(_), 0x8054660 - 0x8051d30, hex(_), 0x805245f - 0x8051d30, hex(_), 0x80549c0 - 0x8052459, hex(_), 0x8052090 - 0x8052459, hex(_), 0x0808d310 - 0x0808d270, 0x0808d270 - 0x080549a0, hex(_), bv.functions[0], bv.functions[0].calling_convention, "bv.functions[0].calling_convention = bv.platform.cdecl_calling_convention", bv.functions[0].calling_convention, bv.functions[0].set_auto_calling_convention(bv.platform.cdecl_calling_convention), bv.functions[0].calling_convention, "bv.functions[0].set_auto_calling_convention(bv.platform.cdecl_calling_convention, conf=100)", "bv.platform.default_calling_convention = bv.platform.cdecl_calling_convention", bv.update_analysis_and_wait(), bv.platform.calling_conventions, "bv.platform.calling_conventions = [bv.platform.cdecl_calling_convention]", bv.platform.calling_conventions.append(bv.platform.cdecl_calling_convention), bv.platform.calling_conventions, bv.platform.register_calling_convention(bv.platform.cdecl_calling_convention), bv.platform.calling_conventions, "bv.platform.default_calling_convention = bv.platform.cdecl_calling_convention", bv.platform.default_calling_convention, "bv.platform.default_calling_convention.handle = bv.platform.cdecl_calling_convention.handle", bv.platform.default_calling_convention, bv.platform.cdecl_calling_convention, bv.functions[0].parameter_vars, "scc = callingconvention.CallingConvention()", "scc = callingconvention.CallingConvention(arch=\"x86_64\", name=\"stackcc\")", "scc = callingconvention.CallingConvention(arch=bv.platform.arch)", "scc = callingconvention.CallingConvention(arch=bv.platform.arch, name=\"stackcc\")", scc, "scc = callingconvention.CallingConvention(arch=bv.platform.arch, name=\"stackcc\")", "bv.platform.default_calling_convention = scc", bv.update_analysis_and_wait(), bv.platform.default_calling_convention, "scc.int_return_reg = self.arch.regs", platform.arch.regs, bv.arch, bv.arch.regs, bv.arch.regs.find(\"rax\"), bv.arch.regs.find[\"rax\"], bv.arch.regs[\"rax\"], "scc.int_return_reg = bv.arch.regs[\"rax\"]", bv.update_analysis_and_wait(), bv.platform.default_calling_convention, scc.__class_.int_return_reg, for f in bv.functions:\n\tprint(f.calling_convention)\n, "for f in bv.functions:\n\tf.calling_convention = bv.platform.default_calling_convention\n\n", for f in bv.functions:\n\tprint(f.name)\n, current_function, current_function.calling_convention, current_function.calling_convention.arg_regs_for_varargs, current_function.calling_convention.arg_regs_share_index, current_function.calling_convention.int_arg_regs, current_function.calling_convention.int_return_reg, !ls, from ptpython.repl import embed(), from ptpython.repl import embed, "embed(globals(), locals())", bv, bv.current_address, bv.seek, bv.current_address, bv.here, here, "current_address = 0x401181", "codelocs = [\n0x0000000040100b,\n0x0000000040115b,\n0x0000000040116e,\n0x00000000401181,\n0x00000000401187,\n0x000000004011a4,\n0x000000004011b9,\n0x000000004011ce,\n0x000000004011d4,\n0x00000000401323,\n0x00000000401350,\n0x0000000040159e,\n0x000000004015ad,\n0x00000000401651,\n0x00000000401705,\n0x0000000040174a,\n0x0000000040176c,\n0x00000000401905,\n0x00000000401944,\n0x00000000401962,\n0x00000000401a24,\n0x00000000401a6c,\n0x00000000401a7a,\n0x00000000401bce,\n0x00000000401be8,\n0x00000000401bef,\n0x00000000401c0f,\n0x00000000401f25,\n0x00000000401f3f,\n0x0000000040206f,\n0x00000000402084,\n0x00000000402098,\n0x000000004020bc,\n0x000000004020c3,\n0x00000000402117,\n0x000000004021e5,\n0x0000000040225d,\n0x00000000402273,\n0x0000000040227c,\n0x00000000402285,\n0x0000000040228e,\n0x0000000040229d,\n0x00000000402318,\n0x00000000402410,\n0x00000000402416,\n0x000000004024ad,\n0x000000004024b5,\n0x000000004024c0,\n0x000000004025fb,\n0x00000000402600,\n0x00000000402773,\n0x000000004034d4,\n0x000000004034da,\n0x00000000403556,\n0x0000000040355c,\n0x00000000403883,\n0x00000000403889,\n0x00000000403a52,\n0x00000000403a59,\n0x00000000403a99,\n0x00000000403aa9,\n0x00000000403ab7,\n0x00000000403ac5,\n0x00000000403b71,\n0x00000000403b7d,\n0x00000000403ba1,\n0x00000000403c5b,\n0x00000000403c66,\n0x00000000403c71,\n0x00000000403d0d,\n0x00000000403d18,\n0x00000000403da7,\n0x00000000403e32,\n0x00000000403e40,\n0x00000000403e4b,\n0x00000000403e70,\n0x00000000403e7e,\n0x00000000403e89,\n0x00000000403e94,\n0x00000000403e98,\n0x00000000403ea6,\n0x00000000403ee7,\n0x00000000403eed,\n0x00000000403ef4,\n0x00000000403f02,\n0x00000000403f18,\n0x00000000403faa,\n0x00000000403ff6,\n0x000000004040ab,\n0x000000004041e0,\n0x00000000404288,\n0x00000000404303,\n0x0000000040436e,\n0x000000004043a9,\n0x000000004043c7,\n0x000000004043cd,\n]\nf = open(\"/tmp/codelocs.txt\", \"w\")\nfor loc in codelocs:\n    current_address = loc\n    lab = input(\"Label: \")\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n    \n", ls, "codelocs = [\n0x0000000040100b,\n0x0000000040115b,\n0x0000000040116e,\n0x00000000401181,\n0x00000000401187,\n0x000000004011a4,\n0x000000004011b9,\n0x000000004011ce,\n0x000000004011d4,\n0x00000000401323,\n0x00000000401350,\n0x0000000040159e,\n0x000000004015ad,\n0x00000000401651,\n0x00000000401705,\n0x0000000040174a,\n0x0000000040176c,\n0x00000000401905,\n0x00000000401944,\n0x00000000401962,\n0x00000000401a24,\n0x00000000401a6c,\n0x00000000401a7a,\n0x00000000401bce,\n0x00000000401be8,\n0x00000000401bef,\n0x00000000401c0f,\n0x00000000401f25,\n0x00000000401f3f,\n0x0000000040206f,\n0x00000000402084,\n0x00000000402098,\n0x000000004020bc,\n0x000000004020c3,\n0x00000000402117,\n0x000000004021e5,\n0x0000000040225d,\n0x00000000402273,\n0x0000000040227c,\n0x00000000402285,\n0x0000000040228e,\n0x0000000040229d,\n0x00000000402318,\n0x00000000402410,\n0x00000000402416,\n0x000000004024ad,\n0x000000004024b5,\n0x000000004024c0,\n0x000000004025fb,\n0x00000000402600,\n0x00000000402773,\n0x000000004034d4,\n0x000000004034da,\n0x00000000403556,\n0x0000000040355c,\n0x00000000403883,\n0x00000000403889,\n0x00000000403a52,\n0x00000000403a59,\n0x00000000403a99,\n0x00000000403aa9,\n0x00000000403ab7,\n0x00000000403ac5,\n0x00000000403b71,\n0x00000000403b7d,\n0x00000000403ba1,\n0x00000000403c5b,\n0x00000000403c66,\n0x00000000403c71,\n0x00000000403d0d,\n0x00000000403d18,\n0x00000000403da7,\n0x00000000403e32,\n0x00000000403e40,\n0x00000000403e4b,\n0x00000000403e70,\n0x00000000403e7e,\n0x00000000403e89,\n0x00000000403e94,\n0x00000000403e98,\n0x00000000403ea6,\n0x00000000403ee7,\n0x00000000403eed,\n0x00000000403ef4,\n0x00000000403f02,\n0x00000000403f18,\n0x00000000403faa,\n0x00000000403ff6,\n0x000000004040ab,\n0x000000004041e0,\n0x00000000404288,\n0x00000000404303,\n0x0000000040436e,\n0x000000004043a9,\n0x000000004043c7,\n0x000000004043cd,\n]\nf = open(\"/tmp/codelocs.txt\", \"w\")\nfor loc in codelocs:\n    current_address = loc\n    lab = input(f\"{loc:#016x}\")\n    if lab == \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\nf.close()\n    \n", "codelocs = [\n0x0000000040100b,\n0x0000000040115b,\n0x0000000040116e,\n0x00000000401181,\n0x00000000401187,\n0x000000004011a4,\n0x000000004011b9,\n0x000000004011ce,\n0x000000004011d4,\n0x00000000401323,\n0x00000000401350,\n0x0000000040159e,\n0x000000004015ad,\n0x00000000401651,\n0x00000000401705,\n0x0000000040174a,\n0x0000000040176c,\n0x00000000401905,\n0x00000000401944,\n0x00000000401962,\n0x00000000401a24,\n0x00000000401a6c,\n0x00000000401a7a,\n0x00000000401bce,\n0x00000000401be8,\n0x00000000401bef,\n0x00000000401c0f,\n0x00000000401f25,\n0x00000000401f3f,\n0x0000000040206f,\n0x00000000402084,\n0x00000000402098,\n0x000000004020bc,\n0x000000004020c3,\n0x00000000402117,\n0x000000004021e5,\n0x0000000040225d,\n0x00000000402273,\n0x0000000040227c,\n0x00000000402285,\n0x0000000040228e,\n0x0000000040229d,\n0x00000000402318,\n0x00000000402410,\n0x00000000402416,\n0x000000004024ad,\n0x000000004024b5,\n0x000000004024c0,\n0x000000004025fb,\n0x00000000402600,\n0x00000000402773,\n0x000000004034d4,\n0x000000004034da,\n0x00000000403556,\n0x0000000040355c,\n0x00000000403883,\n0x00000000403889,\n0x00000000403a52,\n0x00000000403a59,\n0x00000000403a99,\n0x00000000403aa9,\n0x00000000403ab7,\n0x00000000403ac5,\n0x00000000403b71,\n0x00000000403b7d,\n0x00000000403ba1,\n0x00000000403c5b,\n0x00000000403c66,\n0x00000000403c71,\n0x00000000403d0d,\n0x00000000403d18,\n0x00000000403da7,\n0x00000000403e32,\n0x00000000403e40,\n0x00000000403e4b,\n0x00000000403e70,\n0x00000000403e7e,\n0x00000000403e89,\n0x00000000403e94,\n0x00000000403e98,\n0x00000000403ea6,\n0x00000000403ee7,\n0x00000000403eed,\n0x00000000403ef4,\n0x00000000403f02,\n0x00000000403f18,\n0x00000000403faa,\n0x00000000403ff6,\n0x000000004040ab,\n0x000000004041e0,\n0x00000000404288,\n0x00000000404303,\n0x0000000040436e,\n0x000000004043a9,\n0x000000004043c7,\n0x000000004043cd,\n]\n\nf = open(\"/tmp/codelocs.txt\", \"w\")\n\nfor loc in codelocs:\n    current_address = loc\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\nf.close()\n", "def makecodelocs():\n    f = open(\"/tmp/codelocs.txt\", \"w\")\n\n    for loc in codelocs:\n        current_address = loc\n        lab = input(f\"{loc:#016x}: \")\n        if lab ==  \"STOP\":\n            break\n        f.write(f\"{loc:#016x}: {lab}\\n\")\n    f.close()    \n", "def make_codelocs(codelocs):\n\tf = open(\"/tmp/codelocs.txt\", \"w\")\n\tfor loc in codelocs:\n\t\tcurrent_address = loc\n\t\tlab = input(\"{loc:#016x}: \".format(loc=loc))\n\t\tif lab == \"STOP\":\n\t\t\tbreak\n\t\tf.write(\"{loc:#016x}: {lab}\\n\".format(loc=loc, lab=lab))\n\tf.close()\n", codelocs, make_codelocs(codelocs), STOP, "def make_codelocs(codelocs):\n\tglobal current_address\n\tf = open(\"/tmp/codelocs.txt\", \"w\")\n\tfor loc in codelocs:\n\t\tcurrent_address = loc\n\t\tlab = input(\"{loc:#016x}: \".format(loc=loc))\n\t\tif lab == \"STOP\":\n\t\t\tbreak\n\t\tf.write(\"{loc:#016x}: {lab}\\n\".format(loc=loc, lab=lab))\n\tf.close()\n\n", make_codelocs(codelocs), STOP, current_address, "def make_codelocs(codelocs):\n\tglobal current_address\n\tf = open(\"/tmp/codelocs.txt\", \"w\")\n\tfor loc in codelocs:\n\t\tcurrent_address = loc\n\t\t\nlab = input(\"{loc:#016x}: \".format(loc=loc))\n\t\tif lab == \"STOP\":\n\t\t\tbreak\n\t\tf.write(\"{loc:#016x}: {lab}\\n\".format(loc=loc, lab=lab))\n\tf.close()\n", "def make_codelocs(codelocs):\n\tglobal current_address\n\tf = open(\"/tmp/codelocs.txt\", \"w\")\n\tfor loc in codelocs:\n\t\tcurrent_address = loc\n\t\tbv.update_analysis_and_wait()\n\t\tlab = input(\"{loc:#016x}: \".format(loc=loc))\n\t\tif lab == \"STOP\":\n\t\t\tbreak\n\t\tf.write(\"{loc:#016x}: {lab}\\n\".format(loc=loc, lab=lab))\n\tf.close()\n\n", make_codelocs(codelocs), NA, STOP, scriptingprovider.PythonScriptingInstance.perform_set_current_address(0x40100b), scriptingprovider.PythonScriptingProvider.create_instance(), "p = scriptingprovider.PythonScriptingProvider()", p.create_instance(), p.create_instance(bv), bv, bv.handle, "p = scriptingprovider.PythonScriptingProvider(bv.handle)", "p = scriptingprovider.ScriptingInstance", p, p.perform_set_current_address(0x4001181), current_address, "current_address = 0x401181", "f = open(\"/tmp/codelocs.txt\", \"w\")\n\nfor loc in codelocs:\n    current_address = loc\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\nf.close()   \n", "f = open(\"/tmp/codelocs.txt\", \"w\")", "for loc in codelocs:\n    current_address = loc\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", "for loc in codelocs:\n    current_address = loc\n\tbv.update_analysis_and_wait()\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", something, STOP, "for loc in codelocs:\n    bv.navigate(bv.view, loc)\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", NA, cgc_is_hex_digit arg, cgc_is_hex_digit_arg, cgc_list_find return value, cgc_chunk_to_ptr return value (false), cgc_get_msg_type return value in cgc_to_english, cgc_get_bits_from_sixer return value in cgc_parse_msg_type_1, cgc_sixer_bits-to_ascii_str_char return value in cgc_parse_msg_type_5, set as result of cgc_sixer_bits_to_ASCII_str_char return value in cgc_parse_msg_type_5, cgc_sixer_bits_to_ASCII_str_char return value in cgc_parse_msg_type_5, set as result of cgc_sixer_bits_to_ASCII_str_char return value in cgc_parse_msg_type_5, cgc_sixer_bits_to_ASCII_str_char return value in cgc_parse_msg_type_5, set as result of cgc_sixer_bits_to_ASCII_str_char return value in cgc_parse_msg_type_5, cgc_field_to_uint return value in cgc_parse_sentence, return value of cgc_get_msg_type in cgc_parse_sentence, return value of cgc_ascii_hex_to_bin in cgc_is_checksum_correct, return value of cgc_recv_until_delim in main, return value of cgc_parse_sentence in main, f.close(), "codelocs = [\n0x0000000040200b,\n0x00000000402326,\n0x000000004023e6,\n0x00000000402435,\n0x000000004024b0,\n0x00000000402502,\n0x000000004025d6,\n0x00000000402602,\n0x00000000402644,\n0x00000000402665,\n0x000000004026dd,\n0x000000004033f7,\n0x00000000403408,\n0x00000000404072,\n0x00000000404078,\n0x0000000040407e,\n0x00000000404084,\n0x0000000040408a,\n0x00000000404090,\n0x000000004040ab,\n0x000000004040b1,\n0x00000000404322,\n0x0000000040434a,\n0x00000000404372,\n0x00000000404376,\n0x0000000040437c,\n0x00000000404477,\n0x00000000404578,\n0x0000000040464d,\n0x00000000404659,\n0x00000000404985,\n0x00000000404d45,\n0x00000000404d55,\n0x00000000405284,\n0x00000000405412,\n0x0000000040568c,\n0x000000004056dc,\n0x00000000405700,\n0x00000000405aa2,\n0x00000000405c0b,\n0x00000000405ce3,\n0x00000000405cfd,\n0x00000000405dfb,\n0x00000000405f4e,\n0x00000000405f65,\n0x00000000405f6e,\n0x00000000405f77,\n0x00000000405f80,\n0x00000000405f8c,\n0x00000000406058,\n0x00000000406063,\n0x000000004060b6,\n0x000000004061eb,\n0x00000000406273,\n0x0000000040627e,\n0x00000000406289,\n0x00000000406323,\n0x000000004066cf,\n0x0000000040676c,\n0x000000004068dc,\n0x00000000406a27,\n0x00000000406b68,\n]\n", "f = open(\"/tmp/codelocs.txt\", \"w\")", "for loc in codelocs:\n    bv.navigate(bv.view, loc)\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", return value of cgc_isdigit in cgc_atoi, return value of cgc_receive in cgc_receive_fixed, return value of cgc_strlen in cgc_strrchr, return value of cgc_strncmp in cgc_ReceiveCommand, return value of cgc_GetPageVar in cgc_AddPageVar, return value of cgc_strrchr in cgc_InteractWithPage, return value of cgc_strlen in cgc_ServePageWithOverride, return value of cgc_printf in cgc_WalkTree, return value of cgc_LookupNode in cgc_DeleteNode, return value of cgc_strcmp in cgc_LookupNode, return value of cgc_strrchr in cgc_InsertNodeInTree, f.close(), "codelocs=[\n0x0000000040300b,\n0x000000004037c4,\n0x00000000403859,\n0x0000000040392c,\n0x00000000406a25,\n0x00000000406a81,\n0x00000000406f54,\n0x000000004078fd,\n0x000000004079df,\n0x00000000407be4,\n0x00000000407cd5,\n0x00000000407da3,\n0x00000000407e8e,\n0x00000000407f26,\n0x0000000040806b,\n0x00000000408077,\n0x000000004080c2,\n0x000000004080cc,\n0x000000004080fe,\n0x00000000408108,\n0x0000000040813a,\n0x00000000408144,\n0x00000000408176,\n0x00000000408180,\n0x000000004081b2,\n0x000000004081bc,\n0x000000004083a2,\n0x000000004083de,\n0x000000004083e8,\n0x0000000040841a,\n0x00000000408424,\n0x00000000408456,\n0x00000000408460,\n0x00000000408b2e,\n]\n", "for loc in codelocs:\n    bv.navigate(bv.view, loc)\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", STOP, "f = open(\"/tmp/codelocs.txt\", \"w\")", "for loc in codelocs:\n    bv.navigate(bv.view, loc)\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", return value of cgc_receive in cgc_refill, return value of cgc_receive in cgc_fread, return value of cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value of cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value from cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value from cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value from cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value from cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value from cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value from cgc_fread in start_training, return value (from input) of cgc_fread in start_training, return value from cgc_fread in start_training, f.close(), "codelocs=[\n0x0000000040100b,\n0x00000000401633,\n0x00000000401711,\n0x0000000040172e,\n0x000000004017f5,\n0x00000000401800,\n0x0000000040181e,\n0x00000000401937,\n0x00000000401aaf,\n0x00000000401ac8,\n0x00000000401d2d,\n0x00000000401d31,\n0x00000000401d45,\n0x00000000401d9d,\n0x00000000401e50,\n0x00000000401e76,\n0x00000000401e7a,\n0x00000000401f3f,\n0x00000000401f58,\n0x00000000401f5f,\n0x00000000401f67,\n0x00000000401fa6,\n]\n", "f = open(\"/tmp/codelocs.txt\", \"w\")", "for loc in codelocs:\n    bv.navigate(bv.view, loc)\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", return value of cgc_receive in cgc_readuntil, data read from cgc_receive in cgc_readuntil, return value of cgc_transmit, f.close(), "codelocs=[\n0x0000000040200b,\n0x00000000404eda,\n0x00000000404fd2,\n0x00000000404fe4,\n0x00000000404ff7,\n0x00000000405033,\n0x000000004052c2,\n0x000000004052d1,\n0x0000000040548c,\n0x00000000407f9a,\n0x00000000407fd3,\n0x00000000408008,\n0x00000000408048,\n0x00000000408050,\n0x0000000040818a,\n0x00000000408261,\n0x00000000408270,\n0x0000000040827e,\n0x000000004082d1,\n0x000000004082f1,\n0x0000000040847d,\n0x00000000408494,\n0x000000004084b0,\n0x000000004084b7,\n0x000000004084d3,\n0x000000004086c5,\n0x00000000408986,\n0x00000000408a53,\n0x00000000408b96,\n0x00000000408bd9,\n0x00000000408c77,\n0x00000000408ca3,\n0x00000000408cb6,\n0x00000000408cfb,\n0x00000000408d65,\n0x00000000408d8e,\n0x00000000408dd0,\n0x00000000408e33,\n0x0000000040929c,\n0x000000004092a1,\n]\n", "f = open(\"/tmp/codelocs.txt\", \"w\")", "for loc in codelocs:\n    bv.navigate(bv.view, loc)\n    lab = input(f\"{loc:#016x}: \")\n    if lab ==  \"STOP\":\n        break\n    f.write(f\"{loc:#016x}: {lab}\\n\")\n", return value of cgc_receive in cgc_receive_bytes, input (pointer) value from cgc_find_sensor in cgc_add_sensor, return value of cgc_find_sensor in cgc_remove_sensor, return value of cgc_find_sensor in cgc_check_program, input (pointer) value to cgc_get_step, return value of cgc_get_short, f.close(), 0x403ff6, print(\"XXXXX\"), hex(4202656), hex(4202656-0x4060e0), "stuck_points = {\n        \"4202496\": [\n            4202507,\n            {\n                \"4202512\": 801\n            }\n        ],\n        \"4214490\": [\n            4214490,\n            {\n                \"4214494\": 638,\n                \"4214510\": 0\n            }\n        ],\n        \"4214719\": [\n            4214738,\n            {\n                \"4214749\": 28383,\n                \"4215044\": 0\n            }\n        ],\n        \"4214749\": [\n            4214756,\n            {\n                \"4214768\": 28383,\n                \"4215021\": 0\n            }\n        ],\n        \"4214768\": [\n            4214775,\n            {\n                \"4214768\": 0,\n                \"4214796\": 28383\n            }\n        ],\n        \"4214801\": [\n            4214835,\n            {\n                \"4214801\": 0,\n                \"4214856\": 28383\n            }\n        ],\n        \"4215482\": [\n            4215490,\n            {\n                \"4215497\": 9107,\n                \"4215543\": 0\n            }\n        ],\n        \"4215497\": [\n            4215505,\n            {\n                \"4215497\": 0,\n                \"4215530\": 2709\n            }\n        ],\n        \"4215933\": [\n            4215948,\n            {\n                \"4215933\": 0,\n                \"4215968\": 34693\n            }\n        ],\n        \"4226964\": [\n            4226970,\n            {\n                \"4226964\": 0,\n                \"4226982\": 2681\n            }\n        ],\n        \"4227021\": [\n            4227027,\n            {\n                \"4227021\": 0,\n                \"4227038\": 4527\n            }\n        ],\n        \"4227080\": [\n            4227080,\n            {\n                \"4227080\": 0,\n                \"4227096\": 39\n            }\n        ],\n        \"4227144\": [\n            4227144,\n            {\n                \"4227144\": 0,\n                \"4227160\": 5462\n            }\n        ],\n        \"4227152\": [\n            4227152,\n            {\n                \"4227152\": 0,\n                \"4227167\": 2458\n            }\n        ],\n        \"4227442\": [\n            4227466,\n            {\n                \"4227442\": 0,\n                \"4227482\": 4705\n            }\n        ],\n        \"4227681\": [\n            4227681,\n            {\n                \"4227688\": 187212\n            }\n        ],\n        \"4227688\": [\n            4227696,\n            {\n                \"4227629\": 0,\n                \"4227702\": 8218\n            }\n        ],\n        \"4227702\": [\n            4227710,\n            {\n                \"4227702\": 0,\n                \"4227723\": 8218\n            }\n        ],\n        \"4227786\": [\n            4227793,\n            {\n                \"4227786\": 0,\n                \"4227817\": 314\n            }\n        ],\n        \"4227817\": [\n            4227825,\n            {\n                \"4227817\": 0,\n                \"4227848\": 1323\n            }\n        ],\n        \"4228093\": [\n            4228221,\n            {\n                \"4228228\": 90,\n                \"4228262\": 0\n            }\n        ],\n        \"4228244\": [\n            4228244,\n            {\n                \"4228253\": 44\n            }\n        ],\n        \"4228272\": [\n            4228272,\n            {\n                \"4228279\": 15441,\n                \"4228325\": 0\n            }\n        ],\n        \"4228279\": [\n            4228279,\n            {\n                \"4228279\": 0,\n                \"4228297\": 15288\n            }\n        ],\n        \"4228307\": [\n            4228307,\n            {\n                \"4228307\": 0,\n                \"4228325\": 15154\n            }\n        ],\n        \"4228783\": [\n            4228805,\n            {\n                \"4228783\": 0,\n                \"4228823\": 15345\n            }\n        ],\n        \"4229501\": [\n            4229510,\n            {\n                \"4229501\": 0,\n                \"4229526\": 4161553\n            }\n        ],\n        \"4229703\": [\n            4229715,\n            {\n                \"4229703\": 0,\n                \"4229731\": 26807\n            }\n        ],\n        \"4230011\": [\n            4230038,\n            {\n                \"4230011\": 0,\n                \"4230155\": 905\n            }\n        ],\n        \"4230088\": [\n            4230105,\n            {\n                \"4230088\": 0,\n                \"4230155\": 23\n            }\n        ],\n        \"4230263\": [\n            4230263,\n            {\n                \"4230263\": 0,\n                \"4230278\": 7827\n            }\n        ],\n        \"4230300\": [\n            4230307,\n            {\n                \"4230316\": 364876,\n                \"4230667\": 0\n            }\n        ],\n        \"4230316\": [\n            4230326,\n            {\n                \"4230335\": 364876,\n                \"4230458\": 0\n            }\n        ],\n        \"4230335\": [\n            4230395,\n            {\n                \"4230335\": 0,\n                \"4230411\": 364876\n            }\n        ],\n        \"4230477\": [\n            4230501,\n            {\n                \"4230477\": 0,\n                \"4230517\": 230653\n            }\n        ],\n        \"4230542\": [\n            4230542,\n            {\n                \"4230542\": 0,\n                \"4230584\": 229587\n            }\n        ],\n        \"4230584\": [\n            4230608,\n            {\n                \"4230584\": 0,\n                \"4230624\": 230653\n            }\n        ],\n        \"4230683\": [\n            4230707,\n            {\n                \"4230683\": 0,\n                \"4230723\": 535203\n            }\n        ],\n        \"4231828\": [\n            4231836,\n            {\n                \"4231841\": 100022,\n                \"4231858\": 0\n            }\n        ],\n        \"4231841\": [\n            4231841,\n            {\n                \"4231849\": 100022,\n                \"4233915\": 0\n            }\n        ]\n    }\n", for x in stuck_points.values():\n\tprint(hex(x[0]))\n, for i in \"\"\"RESULT: 0x401641\nRESULT: 0x4018df\nRESULT: 0x401ae8\nRESULT: 0x401e9e\nRESULT: 0x4038c5\nRESULT: 0x40119b\nRESULT: 0x403e61\nRESULT: 0x40419e\nRESULT: 0x403ebb\nRESULT: 0x404393\"\"\":\n\tprint(int(i.split(\": \")[2]))\n, for i in \"\"\"RESULT: 0x401641\nRESULT: 0x4018df\nRESULT: 0x401ae8\nRESULT: 0x401e9e\nRESULT: 0x4038c5\nRESULT: 0x40119b\nRESULT: 0x403e61\nRESULT: 0x40419e\nRESULT: 0x403ebb\nRESULT: 0x404393\"\"\":\n\tprint(int(i.split(\": \")[1]))\n\n, for i in \"\"\"RESULT: 0x401641\nRESULT: 0x4018df\nRESULT: 0x401ae8\nRESULT: 0x401e9e\nRESULT: 0x4038c5\nRESULT: 0x40119b\nRESULT: 0x403e61\nRESULT: 0x40419e\nRESULT: 0x403ebb\nRESULT: 0x404393\"\"\":\n\tprint(i)\n\n\n, for i in \"\"\"RESULT: 0x401641\nRESULT: 0x4018df\nRESULT: 0x401ae8\nRESULT: 0x401e9e\nRESULT: 0x4038c5\nRESULT: 0x40119b\nRESULT: 0x403e61\nRESULT: 0x40419e\nRESULT: 0x403ebb\nRESULT: 0x404393\"\"\".splitlines():\n\tprint(i.split(\": \")[1])\n\n\n\n, for i in \"\"\"RESULT: 0x401641\n... RESULT: 0x4018df\n... RESULT: 0x401ae8\n... RESULT: 0x401e9e\n... RESULT: 0x4038c5\n... RESULT: 0x40119b\n... RESULT: 0x403e61\n... RESULT: 0x40419e\n... RESULT: 0x403ebb\n... RESULT: 0x404393\"\"\".splitlines():\n... \tprint(i.split(\": \")[1])\n, for i in \"\"\"RESULT: 0x404559\nRESULT: 0x4040a4\nRESULT: 0x4042c1\nRESULT: 0x404616\nRESULT: 0x40229d\nRESULT: 0x4069b4\"\"\".splitlines():\n\tprint(i.split(\": \")[1]))\n, for i in \"\"\"RESULT: 0x404559\nRESULT: 0x4040a4\nRESULT: 0x4042c1\nRESULT: 0x404616\nRESULT: 0x40229d\nRESULT: 0x4069b4\"\"\".splitlines():\n\tprint(i.split(\": \")[1])\n\n

[triage]
recentFile=/home/novafacing/Downloads/flash.bin

[ui]
addressDialogHistory=403810, 401e6c, 0x401631, _start, cgc_strtok, main, _init, 402000, 404c4b, 405011, 4045b7, 403cb0, 402950, 402447, 402440, 401ea9, 401b7b, 40100b, 401ba8, 0x401b7b, 0x40100b, 404cbe, 404539, 404500, 404465, 4031e7, 4029a6, 4026e1, 402466, 40245b, 40200b, 40477e, 40350b, 402aaf, 4027c7, 0x406273, 401181, 40116e, 40115b, 401152, 0x600103d0, 0x6001e928, 401000, 0x686318, 7c70, 600bd2, 600be6, 4014d7, 0x600c93, 600b9d
findDialogEndHistory=0x4149e8, 0x60cd2690, 0x6a46a8, 0x24c508, 0xe8d0
findDialogStartHistory=0x400000, 0x60010000, 0x0
inputNameHistory=UrlAppend?, url_append?, LicenseRequest?, LicensePrompt?, exit_wrapper, exit?, main, print_error, _init, some_init_thing, const_0xffff03, const_0xfffffc, printf, _do_printf, printf(?), receiver_str, intro_text_str, lwip_init_str, intro_text, print_intro, reset_vector, random_seed, has_some_loops, devtype_table, elf_to_open, _\"Failed testbed check\\n\", _\"CHESS\", _\"devices/rcd\", _\"devices/acd2\", \"devices/maint\", \"devices/fsd\", str_\"devices/fsd\", str_\"devices/maint\", str_\"devices/acd2\", str_\"CHESS\", timer_ticks_down, timer_makes_too_much_noise, check_ingredients, add_water, add_salt, add_yeast, add_flower, you_bring_oil, brother_is_awake, checks_after_smoke, checks_for_firealarm, everything is ok, dispose of bread, clean counters, clean sink
lastSeenOnboardingVersion=1
localVariableNameHistory=append, size, url, exit_code, choice, user, admin, game, int_str, level, genexpr, keybuffer_maybe?, multibyte_keycode, keycode, read_key, ypos, ypost, xpos, boss_level, _Game, Game, flag, v, buf, vm, r1, r0, some_mem, somevec, mem, regs2, regs, conn, data, mode, opcode_table, b_mode, const_7?, lower_byte, rv, success, _instr, value, regnum, devices, canary, recv_success, dev, timeptr, section_ptr
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(-1 -1)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(60 1259)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(1941 330)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(60 72)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(1395 330)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(-1 -1)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(-1 -1)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CGhinja%20Decompiler%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CGhinja%20Decompiler%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0_dockNesting=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\x5\xb0\0\0\x2@\0\0\x12\xff\0\0\a\xa9\0\0\x5\xb0\0\0\x2@\0\0\x12\xff\0\0\a\xa9\0\0\0\x1\0\0\0\0\rp\0\0\x5\xb0\0\0\x2@\0\0\x12\xff\0\0\a\xa9)
mainwindow\%3C1440x2560%3A3440x1440%3E\0_globalAreaContent="{\n\t\"active\" : \"Log\",\n\t\"titles\" : \n\t[\n\t\t\"Log\",\n\t\t\"Python Console\"\n\t],\n\t\"type\" : \"tabs\"\n}"
mainwindow\%3C1440x2560%3A3440x1440%3E\0_globalAreaSplitterSizes=868, 434
mainwindow\%3C1440x2560%3A3440x1440%3E\0_globalAreaVisible=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0_sidebarContentSplitterSizes=1017, 285
mainwindow\%3C1440x2560%3A3440x1440%3E\0_sidebarParentSplitterSizes=975, 2381
mainwindow\%3C1440x2560%3A3440x1440%3E\0_state="@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0=\0\0\x5:\xfc\x2\0\0\0\x4\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\x19\0\0\x5\x2\0\0\0\0\0\0\0\0\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\x5!\0\0\0\x16\0\0\0\0\0\0\0\0\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\x5=\0\0\0\x16\0\0\0\0\0\0\0\0\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0S\0t\0\x61\0\x63\0k\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x1\0\0\0<\0\0\x5\x39\xfc\x2\0\0\0\x3\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\x1\0\0\0\x19\0\0\x4\xeb\0\0\0\0\0\0\0\0\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\x1\0\0\x5\n\0\0\0H\0\0\0\0\0\0\0\0\xfb\0\0\0\x44\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x3\0\0\r\xe\0\0\x1J\xfc\x1\0\0\0\x4\xfc\0\0\0\0\0\0\r\xe\0\0\0\0\0\xff\xff\xff\xfc\x2\0\0\0\x2\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfc\0\0\x4\b\0\0\x1J\0\0\0\0\0\xff\xff\xff\xfc\x1\0\0\0\x2\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\x1\0\0\0\0\0\0\x5s\0\0\0\0\0\0\0\0\xfc\0\0\x5y\0\0\a\x95\0\0\0\0\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x4\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0G\0h\0i\0n\0j\0\x61\0 \0\x44\0\x65\0\x63\0o\0m\0p\0i\0l\0\x65\0r\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0H\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0\x42\0r\0\x65\0\x61\0k\0p\0o\0i\0n\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0T\0h\0r\0\x65\0\x61\0\x64\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0M\0o\0\x64\0u\0l\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\rP\0\0\x5\x37\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)"
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(128 931)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(128 398)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1_dockNesting=true
mainwindow\%3C1440x2560%3A3440x1440%3E\1_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\f^\0\0\0\x10\0\0\x12\xff\0\0\x5{\0\0\f^\0\0\0\x10\0\0\x12\xff\0\0\x5{\0\0\0\x1\0\0\0\0\rp\0\0\f^\0\0\0\x10\0\0\x12\xff\0\0\x5{)
mainwindow\%3C1440x2560%3A3440x1440%3E\1_sidebarContentSplitterSizes=978, 353
mainwindow\%3C1440x2560%3A3440x1440%3E\1_sidebarParentSplitterSizes=393, 1129
mainwindow\%3C1440x2560%3A3440x1440%3E\1_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x2\0\0\0\x1\0\0\0\x80\0\0\x5\x37\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x31\0]\x1\0\0\0\x19\0\0\x3\xa3\0\0\0\x35\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x31\0]\x1\0\0\x3\xc2\0\0\x1\x8e\0\0\0\x15\0\xff\xff\xff\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x1\0\0\0\x1\xfc\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x31\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x15\0\0\0\x15\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfc\0\0\0\0\0\0\0\x80\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\0\0\x6\x1c\0\0\x5\x37\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3A3440x1440%3E\0_dockNesting=true
mainwindow\%3C2560x1440%3A3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\n\x10\0\0\0\x10\0\0\x17_\0\0\x5{\0\0\n\x10\0\0\0\x10\0\0\x17_\0\0\x5{\0\0\0\x1\0\0\0\0\rp\0\0\n\x10\0\0\0\x10\0\0\x17_\0\0\x5{)
mainwindow\%3C2560x1440%3A3440x1440%3E\0_globalAreaContent="{\n\t\"active\" : \"Python Console\",\n\t\"titles\" : \n\t[\n\t\t\"Log\",\n\t\t\"Python Console\"\n\t],\n\t\"type\" : \"tabs\"\n}"
mainwindow\%3C2560x1440%3A3440x1440%3E\0_globalAreaSplitterSizes=868, 434
mainwindow\%3C2560x1440%3A3440x1440%3E\0_globalAreaVisible=true
mainwindow\%3C2560x1440%3A3440x1440%3E\0_sidebarContentSplitterSizes=956, 346
mainwindow\%3C2560x1440%3A3440x1440%3E\0_sidebarParentSplitterSizes=775, 2581
mainwindow\%3C2560x1440%3A3440x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\0\0\0\rP\0\0\x5\x37\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(220 397)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(220 928)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1_dockNesting=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\a\x86\0\0\b\x80\0\0\fo\0\0\r\xeb\0\0\a\x86\0\0\b\x80\0\0\fo\0\0\r\xeb\0\0\0\0\0\0\0\0\n\0\0\0\a\x86\0\0\b\x80\0\0\fo\0\0\r\xeb)
mainwindow\%3C2560x1440%3A3840x2160%3E\1_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\xdc\0\0\x5\x33\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x3\xa0\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\x1\0\0\x3\xc1\0\0\x1\x8d\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\0\x80\0\0\x5\x33\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x31\0]\x1\0\0\0\x1b\0\0\x5\x33\0\0\0\x38\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x31\0]\0\0\0\0\0\0\0\0\x1e\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x2\0\0\0\x2\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfc\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\0\0\x3\x82\0\0\x5\x33\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(220 397)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(63 1331)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(128 29)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(-1 -1)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(220 928)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0_dockNesting=true
mainwindow\%3C2560x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\0\0\0\0\0\n\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{)
mainwindow\%3C2560x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\xcc\0\0\x5\x36\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\0\xb0\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\xd1\0\0\x4\x80\0\0\0\x18\0\xff\xff\xff\0\0\0\x1\0\0\0?\0\0\x5\x36\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5\x33\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5\x36\0\0\0\x18\0\xff\xff\xff\0\0\0\x3\0\0\t\xe0\0\0\0\xe9\xfc\x2\0\0\0\x4\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfc\0\0\x4h\0\0\0\xe9\0\0\0^\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\x4\xcc\0\0\0\x85\0\0\0\x18\0\0\0\x18\0\0\t\xe0\0\0\x4G\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(220 397)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(220 928)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1_dockNesting=true
mainwindow\%3C2560x1440%3E\1_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\0\0\0\0\0\n\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{)
mainwindow\%3C2560x1440%3E\1_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\xdc\0\0\x5\x33\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x3\xa0\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\x1\0\0\x3\xc1\0\0\x1\x8d\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\0\x80\0\0\x5\x33\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x31\0]\x1\0\0\0\x1b\0\0\x5\x33\0\0\0\x38\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x31\0]\0\0\0\x5\x34\0\0\0\x1d\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x2\0\0\0\x2\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfc\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\0\0\bx\0\0\x5\x33\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(237 240)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(237 1121)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0_dockNesting=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\x5\xb0\0\0\x2@\0\0\n\x13\0\0\a\xab\0\0\x5\xb0\0\0\x2@\0\0\n\x13\0\0\a\xab\0\0\0\0\0\0\0\0\rp\0\0\x5\xb0\0\0\x2@\0\0\n\x13\0\0\a\xab)
mainwindow\%3C3440x1440%3A1440x2560%3E\0_sidebarContentSplitterSizes=864, 312
mainwindow\%3C3440x1440%3A1440x2560%3E\0_sidebarParentSplitterSizes=366, 716
mainwindow\%3C3440x1440%3A1440x2560%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\x1\x33\0\0\x5\x31\xfc\x2\0\0\0\x3\xfc\0\0\0\x1b\0\0\x2\x93\0\0\0\0\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\x1\0\0\x2\xb4\0\0\x2\x98\0\0\0\0\0\0\0\0\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0S\0t\0\x61\0\x63\0k\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\0\0\0\x1\0\0\x1+\0\0\x5W\xfc\x2\0\0\0\x5\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x3\xc6\0\0\0\x15\0\0\0\x15\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5W\0\0\0\x15\0\0\0\x15\xfb\0\0\0>\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0\x42\0u\0\x66\0\x66\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\x44\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\0\0\0\x3\0\0\x4\x64\0\0\0\x97\xfc\x1\0\0\0\x5\xfc\0\0\0\0\0\0\x4\x64\0\0\0\x46\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x15\0\0\0\x15\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfc\0\0\x4\xbb\0\0\0\x97\0\0\0[\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0[\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0M\0\x65\0m\0o\0r\0y\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0H\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0\x42\0r\0\x65\0\x61\0k\0p\0o\0i\0n\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0<\0\0\0<\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0T\0h\0r\0\x65\0\x61\0\x64\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0<\0\0\0<\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0M\0o\0\x64\0u\0l\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0<\0\0\0<\0\0\x4\x64\0\0\x4\x9c\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(307 664)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(307 659)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0_dockNesting=true
mainwindow\%3C3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y\0\0\0\0\0\0\0\0\rp\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y)
mainwindow\%3C3440x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\x1\x33\0\0\x5\x31\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x2\x93\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0~\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\x1\0\0\x2\xb4\0\0\x2\x98\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\x1+\0\0\x5W\xfc\x2\0\0\0\x4\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x3\xc6\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5W\0\0\0\x18\0\0\0\x18\xfb\0\0\0>\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0\x42\0u\0\x66\0\x66\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\x5j\0\0\0\x97\xfc\x1\0\0\0\x2\xfc\0\0\x1\x39\0\0\x5j\0\0\0\x46\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfc\0\0\x4\xb5\0\0\0\x97\0\0\0^\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0M\0\x65\0m\0o\0r\0y\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\0\0\x5j\0\0\x4\x94\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3840x2160%3A3440x1440%3E\0_dockNesting=true
mainwindow\%3C3840x2160%3A3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\xf\x10\0\0\0\x10\0\0\x1c_\0\0\x5y\0\0\xf\x10\0\0\0\x10\0\0\x1c_\0\0\x5y\0\0\0\x1\0\0\0\0\rp\0\0\xf\x10\0\0\0\x10\0\0\x1c_\0\0\x5y)
mainwindow\%3C3840x2160%3A3440x1440%3E\0_globalAreaContent="{\n\t\"active\" : \"Python Console\",\n\t\"titles\" : \n\t[\n\t\t\"Log\",\n\t\t\"Python Console\"\n\t],\n\t\"type\" : \"tabs\"\n}"
mainwindow\%3C3840x2160%3A3440x1440%3E\0_globalAreaSplitterSizes=868, 434
mainwindow\%3C3840x2160%3A3440x1440%3E\0_globalAreaVisible=true
mainwindow\%3C3840x2160%3A3440x1440%3E\0_sidebarContentSplitterSizes=956, 346
mainwindow\%3C3840x2160%3A3440x1440%3E\0_sidebarParentSplitterSizes=774, 2582
mainwindow\%3C3840x2160%3A3440x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\0\0\0\rP\0\0\x5\x37\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(127 416)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(63 2071)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(1259 901)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(63 29)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(3840 931)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(127 1684)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0_dockNesting=true
mainwindow\%3C3840x2160%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43\0\0\0\0\0\0\0\0\xf\0\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43)
mainwindow\%3C3840x2160%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\x7f\0\0\a<\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\0\xbb\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\xdc\0\0\x6{\0\0\0\x18\0\xff\xff\xff\0\0\0\x1\0\0\0?\0\0\a<\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\a\x1b\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\a<\0\0\0\x1b\0\0\0\x18\0\xff\xff\xff\0\0\0\x3\0\0\ak\0\0\x1I\xfc\x1\0\0\0\x1\xfc\0\0\0\0\0\0\ak\0\0\0r\0\xff\xff\xff\xfa\0\0\0\x1\x1\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\xff\xff\xff\0\0\ak\0\0\0\x8e\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
recentCommands=Snippets – Snippet Editor..., Open Python API Reference..., Add Tag...
recentFiles=/home/novafacing/hub/pyafl_qemu_trace/test/binaries/Flight_Routes/Flight_Routes, /home/novafacing/hub/cracks/GSP5.bndb, /home/novafacing/.wine/drive_c/Program Files (x86)/Sketchpad/GSP5.exe, /home/novafacing/hub/chess-blobs/cherry/challenge_bin/cvs-1.12.13+real/src/cvs, /home/novafacing/hub/ctf/2022plaid/holmium, /home/novafacing/hub/ctf/2022aprilfoools/tax, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/Neural_House, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/ASCII_Content_Server, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/AIS-Lite, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/CGC_Hangman_Game, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/Thermal_Controller_v3, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/root64_and_parcour, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/Network_File_System_v3, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/CGC_File_System, /home/novafacing/hub/reface/evaluation/logs_goodseed_preproc_stats_with_fix/CGC_File_System.json, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/Eddy, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation_stats_with_fix/Casino_Games, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/AIS-Lite, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/Thermal_Controller_v3, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/root64_and_parcour, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/Neural_House, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/Network_File_System_v3, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/Eddy, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/CGC_Hangman_Game, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/CGC_File_System, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/Casino_Games, /home/novafacing/hub/reface/evaluation/cgc_binaries_evaluation/ASCII_Content_Server, /home/novafacing/Downloads/cgc/Thermal_Controller_v3/Thermal_Controller_v3, /home/novafacing/Downloads/cgc/root64_and_parcour/root64_and_parcour, /home/novafacing/Downloads/cgc/Neural_House/Neural_House, /home/novafacing/Downloads/cgc/Eddy/Eddy, /home/novafacing/Downloads/cgc/CGC_Hangman_Game/CGC_Hangman_Game, /home/novafacing/Downloads/cgc/Casino_Games/Casino_Games, /home/novafacing/Downloads/cgc/ASCII_Content_Server/ASCII_Content_Server, /home/novafacing/Downloads/cgc/AIS-Lite/AIS-Lite, /home/novafacing/Downloads/cgc/Network_File_System_v3/Network_File_System_v3, /home/novafacing/Downloads/cgc/CGC_File_System/CGC_File_System, /home/novafacing/hub/ctf/2022defcamp/vuln.bndb, /home/novafacing/hub/ctf/2022defcamp/vuln, /home/novafacing/hub/bitwig-crack/ext/data/opt/bitwig-studio/bitwig-studio
stackAdjustSizeHistory=8, 64, 0x0, 0x16, 0x4
typeDialogHistory=wchar_t[36], wchar_t *, char *, union user_admin* admin, user_admin, int64_t Run(Game * g), Game *, struct Game * game, Vec *, Vec * v, RawVec *, Vec, vm *, int16_t r0, int64_t *, int64_t, char[], struct rc* rc, rc *, uint64_t, "int64_t  vm_get_buf(struct vm* vm, int32_t read_addr, char* buf, int32_t size)", "int64_t  vm_set_buf(struct vm* vm, int32_t write_addr, char* data, int32_t size)", "int64_t  vm_set_u32(struct vm* vm, int32_t write_addr, int32_t value)", "int64_t  vm_set_u16(struct vm* vm, int32_t write_addr, uint16_t data)", "int64_t  vm_set_u8(struct vm* vm, int32_t write_addr, char data)", "int64_t  vm_set_u8(vm * vm, int32_t write_addr, char data)", struct r5_instruction* instr_2, struct r5_instruction* instr_1, r5_instruction * instr, char * cur_instr_str, uint64_t __unk, vm * vm, struct r5_instruction * instr, char * buf, "int64_t  r5_decode(uint32_t rs1, struct r5_instruction *instr)", char const [0x3], char const [0x4], char const [0x5], char const [0x6], char const [0xb], char const [0xa], char const [0x8], char const [0x7], char const [0x9], "char const[7];", "char const[6];", "char const[4];", "char const[5];", struct strtab_entry result_strings[32], "char const wfi_str[4];"
typeNameHistory=user_admin, level, sz, buf, mem, "mem_size;", strtab_entry, enabled, member_0x132, debug, mtimecmp, mtime, "DEVICE_TYPE_DEBUG = 1", "DEVICE_TYPE_DEBUG = 0x1000000000", "DEVICE_TYPE_BUS = 0", fill, attr2, attr1, attr0
