[General]
default_dir=/home/novafacing/hub/bitwig-crack/ext/data/opt/bitwig-studio/bitwig-studio
tagIndex=3

[assemble]
arch=x86_64
text=

[compile]
arch=x86_64
options=@Variant(\0\0\0\b\0\0\0\x1\0\0\0\x18\0u\0n\0s\0\x61\0\x66\0\x65\0-\0s\0t\0\x61\0\x63\0k\0\0\0\n\0\0\0\0)
text="#define REINTERFACE_PTR_START 0xaaac008\n#define REINTERFACE_PTR 0xaaac000\n\nint main() {}\n\nuint32_t test(uint8_t* arg_0, uint64_t arg_1, uint8_t* arg_2, uint32_t* arg_3) {\n\tint LENGTH_0 = 0x30; // Buffer: arg_2 1\n\n\tchar **reinterfaced_ptr_start = ((char**)(REINTERFACE_PTR_START)); // this points to end\n\tchar **reinterfaced_ptr = ((char**)(REINTERFACE_PTR));\n\tchar *prev = 0;\n\tint i = 0;\n\tuint32_t ret = 0;\n\n\n\n\twhile (prev != *reinterfaced_ptr_start) {\n\t\tprev = *reinterfaced_ptr_start;\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < LENGTH_0) memcpy(&(arg_2)[i], (*reinterfaced_ptr_start)--, 1);\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < 4) memcpy(&((char*)arg_3)[i], (*reinterfaced_ptr_start)--, 1);\nif (*reinterfaced_ptr_start < *reinterfaced_ptr) break;\nif (i < 4) memcpy(&((char*)&ret)[i], (*reinterfaced_ptr_start)--, 1);\n\n\t\ti++;\n\t}\n\n\treturn ret;\n}"

[disasm]
address=true
opcode=true

[find]
all=true
case=true
range=0
string=1.3
type=Escaped string

[hex]
color=ascii
contrast=normal
highlight=byte

[script]
history=binaryninja.core_product(), binaryninja.core_serial(), binaryninja.core_product_type(), binaryninja.core_license_count(), binaryninja.core_expires(), print('hehhlo'), bv, bv.open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), "bv =open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", bv, "bv = open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", bv, open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64'), "nbv = open_view('/home/novafacing/hub/juliet_test_cases/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01-bad-x64')", nbv, nbv.has_functions, nbv.functions, nbv.update_analysis_and_wait(), nbv, import csv, csv, "bv.navigate(bv, 0x10eac)", bv.navigate(0x10eac), bv, bv.linear_disassembly, "for f in bv.functions:\n\tfor b in f:\n\t\tfor i in b:\n\t\t\tif 0x10b24 <= i.addr <= 0x10b24:\n\t\t\t\tb.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n", "for f in bv.functions:\n\tfor b in f:\n\t\t\tif b.start <= 0x10b24 <= b.end:\n\t\t\t\tb.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n", "for f in bv.functions:\n\tfor b in f:\n\t\t\tif b.start <= 0x10b24 <= b.end:\n\t\t\t\tg = f.create_graph()\n\t\t\t\tbv.show_graph_report('func', g)\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(b)]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", import os, "bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(b)]", bins, "bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/')]", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            bv.show_graph_report(b, g)\n    input()\n", raise, "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for b in f:\n            for t in trace:\n                if b.start <= t <= b.end:\n                    b.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= b.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    input()\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    choice_f = ChoiceField(\"Options\", [\"Yes\", \"Exit\"])\n    get_form_input([\"Get Data\", None, choice_f], \"The options\")\n    if (choice_f.result != 0):\n        exit(1)\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t <= blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    get_form_input([\"Continue?\", None], \"Options\")\n", "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", input('press enter'), input(), "import os\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    time.sleep(5)\n    if not get_form_input([\"Continue?\", None], \"Options\"):\n        exit(0)\n", raw_input(), scriptingprovider.original_stdin, scriptingprovider.original_stdin.read(10), "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    scriptingprovider.original_stdin.read(1)\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    scriptingprovider.original_stdin.read(1)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n\n    scriptingprovider.original_stdin.read(1)\n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(blk.start), hex(t), hex(blk.end))\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            g = f.create_graph()\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    blk.highlight = highlight.HighlightColor(red=208, blue=153, green=132)\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(colors)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit)\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b))]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for t in trace:\n        print(hex(t))\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and fscanf in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", "import os\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases', b, b + '-' + ARCH))\n    print(\"===== \" + b + \" =====\")\n    for t in trace:\n        print(hex(t))\n    colors = list(purp.range_to(Color(\"red\"), len(trace)))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1) \n", 0x57fe0+1709, hex(_), 0x80583b6 - 0x8057fe0, hex(0x80583b6 - 0x8057fe0), "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'armv7'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    \"\"\"\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    \"\"\"\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(t))\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", "import os\nimport time\nfrom colour import Color\npurp = Color(\"purple\")\n\nARCH = 'x64'\n\n# bins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases', b)) and 'fscanf' in b]\nbins = [b for b in os.listdir('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/') if os.path.isdir(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b)) and 'fgets' in b and '72' in b]\nbins.sort()\n\nfor b in bins:\n    trace = [addr for addr in map(lambda x: int(x, 16), open(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, 'trace-' + ARCH + '.txt'), 'r').read().splitlines())]\n    tbv = open_view(os.path.join('/home/novafacing/hub/juliet_test_cases/tests/CWE121_Stack-Based_Buffer_Overflow-O0/', b, b + '-' + ARCH))\n    print(\"====== \" + b + \" ======\")\n    print(trace)\n    \"\"\"\n    try:\n        for t in trace:\n            print(hex(t))\n    except Exception as e:\n        print(\"EXITED: \", e)\n    \"\"\"\n    print(\"====== COMPLETE ======\")\n    colors = list(purp.range_to(Color(\"red\"), len(trace) + 1))\n    cit = iter(colors)\n    for f in tbv.functions:\n        for blk in f:\n            for t in trace:\n                if blk.start <= t < blk.end:\n                    print(hex(t))\n                    ctup = next(cit).rgb\n                    blk.highlight = highlight.HighlightColor(red=int(255 * ctup[0]), blue=int(255 * ctup[1]), green=int(255 * ctup[2]))\n    for f in tbv.functions:\n        if f.start == trace[0]:\n            settings = binaryninja.function.DisassemblySettings()\n            settings.set_option(binaryninja.enums.DisassemblyOption.ShowAddress, True)\n            g = f.create_graph(settings=settings)\n            tbv.show_graph_report(b, g)\n    while scriptingprovider.original_stdin.read(1) == '':\n        scriptingprovider.original_stdin.read(1)\n\n", 0x8051b26 - 0x8051750, hex(982), 0x8051750 - 0x8048000, hex(_), 0x8054672 - 0x8051d2d, hex(_), 0x80546a0 - 0x8051d70, hex(_), 0x8052146 - 0x8051d70, hex(_), 0x08051d70 - 0x80546a0, hex(_), 0x8054660 - 0x8051d30, hex(_), 0x805245f - 0x8051d30, hex(_), 0x80549c0 - 0x8052459, hex(_), 0x8052090 - 0x8052459, hex(_), 0x0808d310 - 0x0808d270, 0x0808d270 - 0x080549a0, hex(_), bv.functions[0], bv.functions[0].calling_convention, "bv.functions[0].calling_convention = bv.platform.cdecl_calling_convention", bv.functions[0].calling_convention, bv.functions[0].set_auto_calling_convention(bv.platform.cdecl_calling_convention), bv.functions[0].calling_convention, "bv.functions[0].set_auto_calling_convention(bv.platform.cdecl_calling_convention, conf=100)", "bv.platform.default_calling_convention = bv.platform.cdecl_calling_convention", bv.update_analysis_and_wait(), bv.platform.calling_conventions, "bv.platform.calling_conventions = [bv.platform.cdecl_calling_convention]", bv.platform.calling_conventions.append(bv.platform.cdecl_calling_convention), bv.platform.calling_conventions, bv.platform.register_calling_convention(bv.platform.cdecl_calling_convention), bv.platform.calling_conventions, "bv.platform.default_calling_convention = bv.platform.cdecl_calling_convention", bv.platform.default_calling_convention, "bv.platform.default_calling_convention.handle = bv.platform.cdecl_calling_convention.handle", bv.platform.default_calling_convention, bv.platform.cdecl_calling_convention, bv.functions[0].parameter_vars, "scc = callingconvention.CallingConvention()", "scc = callingconvention.CallingConvention(arch=\"x86_64\", name=\"stackcc\")", "scc = callingconvention.CallingConvention(arch=bv.platform.arch)", "scc = callingconvention.CallingConvention(arch=bv.platform.arch, name=\"stackcc\")", scc, "scc = callingconvention.CallingConvention(arch=bv.platform.arch, name=\"stackcc\")", "bv.platform.default_calling_convention = scc", bv.update_analysis_and_wait(), bv.platform.default_calling_convention, "scc.int_return_reg = self.arch.regs", platform.arch.regs, bv.arch, bv.arch.regs, bv.arch.regs.find(\"rax\"), bv.arch.regs.find[\"rax\"], bv.arch.regs[\"rax\"], "scc.int_return_reg = bv.arch.regs[\"rax\"]", bv.update_analysis_and_wait(), bv.platform.default_calling_convention, scc.__class_.int_return_reg, for f in bv.functions:\n\tprint(f.calling_convention)\n, "for f in bv.functions:\n\tf.calling_convention = bv.platform.default_calling_convention\n\n", for f in bv.functions:\n\tprint(f.name)\n, current_function, current_function.calling_convention, current_function.calling_convention.arg_regs_for_varargs, current_function.calling_convention.arg_regs_share_index, current_function.calling_convention.int_arg_regs, current_function.calling_convention.int_return_reg, !ls, from ptpython.repl import embed(), from ptpython.repl import embed, "embed(globals(), locals())"

[triage]
recentFile=/home/novafacing/Downloads/flash.bin

[ui]
addressDialogHistory=0x600103d0, 0x6001e928, 401000, 0x686318, 7c70, 600bd2, 600be6, 4014d7, 0x600c93, 600b9d, 0x600b53, 0x00000000006009a1, 0x0000000000600861, 0x8048b67, 0x8052ac0, 8052ac0, 0x8052466, 0x8052090, 8052160, 8056f90, 0x8056fb0, 8056fb0, 8057010, 0x806a3a6, 0x80573bb, 0x80546a0, 0x80e09e0, 0x8048000, 0x10a6c, 0x10c54, 0x10e4c, 0x400c7e, 0x400e70, 0x4010ce, 0x401866, 0x1182c, 0x401d20, 0x40184e, 0x4010b6, 0x11128, 0x10e30, 0x400e58, 0x10c38, 0x400c66, 0xd83060, 0x30014e8, 0x30014cc, 30
findDialogEndHistory=0x60cd2690, 0x6a46a8, 0x24c508, 0xe8d0
findDialogStartHistory=0x60010000, 0x400000, 0x0
inputNameHistory=print_error, _init, main, some_init_thing, const_0xffff03, const_0xfffffc, printf, _do_printf, printf(?), receiver_str, intro_text_str, lwip_init_str, intro_text, print_intro, reset_vector, random_seed, has_some_loops, devtype_table, elf_to_open, _\"Failed testbed check\\n\", _\"CHESS\", _\"devices/rcd\", _\"devices/acd2\", \"devices/maint\", \"devices/fsd\", str_\"devices/fsd\", str_\"devices/maint\", str_\"devices/acd2\", str_\"CHESS\", timer_ticks_down, timer_makes_too_much_noise, check_ingredients, add_water, add_salt, add_yeast, add_flower, you_bring_oil, brother_is_awake, checks_after_smoke, checks_for_firealarm, everything is ok, dispose of bread, clean counters, clean sink, bread rises touching oven, kitchen catches fire, box is warm, mom brings you food then finds the bowl, mom finds the bowl, oven glows soft orange
lastSeenOnboardingVersion=1
localVariableNameHistory=game, int_str, level, genexpr, keybuffer_maybe?, multibyte_keycode, keycode, read_key, ypos, ypost, xpos, boss_level, _Game, Game, flag, v, buf, vm, r1, r0, some_mem, somevec, mem, regs2, regs, conn, data, mode, opcode_table, b_mode, const_7?, lower_byte, rv, success, _instr, size, value, regnum, devices, canary, recv_success, dev, timeptr, section_ptr, section_hdr_table, cur_shdr, cur_phdr, e_shentsize, e_shoff, e_shnum
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(-1 -1)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(60 1259)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(1941 330)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(60 72)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(1395 330)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(-1 -1)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(-1 -1)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CGhinja%20Decompiler%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\0%3AOther%20Docks%5CGhinja%20Decompiler%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0_dockNesting=true
mainwindow\%3C1440x2560%3A3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\0\x10\0\0\x2@\0\0\r_\0\0\a\xab\0\0\0\x10\0\0\x2@\0\0\r_\0\0\a\xab\0\0\0\x1\0\0\0\0\rp\0\0\0\x10\0\0\x2@\0\0\r_\0\0\a\xab)
mainwindow\%3C1440x2560%3A3440x1440%3E\0_sidebarContentSplitterSizes=779, 218
mainwindow\%3C1440x2560%3A3440x1440%3E\0_sidebarParentSplitterSizes=956, 2334
mainwindow\%3C1440x2560%3A3440x1440%3E\0_state="@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0=\0\0\x5:\xfc\x2\0\0\0\x4\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\x19\0\0\x5\x2\0\0\0\0\0\0\0\0\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\x5!\0\0\0\x16\0\0\0\0\0\0\0\0\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\x5=\0\0\0\x16\0\0\0\0\0\0\0\0\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0S\0t\0\x61\0\x63\0k\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x1\0\0\0<\0\0\x5\x39\xfc\x2\0\0\0\x3\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\x1\0\0\0\x19\0\0\x4\xeb\0\0\0\x35\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\x1\0\0\x5\n\0\0\0H\0\0\0\x15\0\xff\xff\xff\xfb\0\0\0\x44\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\x3\0\0\r\xe\0\0\x1J\xfc\x1\0\0\0\x4\xfc\0\0\0\0\0\0\r\xe\0\0\0\xc2\0\xff\xff\xff\xfc\x2\0\0\0\x2\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfc\0\0\x4\b\0\0\x1J\0\0\0\x81\0\xff\xff\xff\xfc\x1\0\0\0\x2\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\x1\0\0\0\0\0\0\x5s\0\0\0v\0\xff\xff\xff\xfc\0\0\x5y\0\0\a\x95\0\0\0\x46\0\xff\xff\xff\xfa\0\0\0\x1\x2\0\0\0\x4\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0G\0h\0i\0n\0j\0\x61\0 \0\x44\0\x65\0\x63\0o\0m\0p\0i\0l\0\x65\0r\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0[\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfb\0\0\0H\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0\x42\0r\0\x65\0\x61\0k\0p\0o\0i\0n\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0T\0h\0r\0\x65\0\x61\0\x64\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0M\0o\0\x64\0u\0l\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\r\xe\0\0\x3\xe9\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)"
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(128 931)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(128 398)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(0 0)
mainwindow\%3C1440x2560%3A3440x1440%3E\1%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C1440x2560%3A3440x1440%3E\1_dockNesting=true
mainwindow\%3C1440x2560%3A3440x1440%3E\1_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\f^\0\0\0\x10\0\0\x12\xff\0\0\x5{\0\0\f^\0\0\0\x10\0\0\x12\xff\0\0\x5{\0\0\0\x1\0\0\0\0\rp\0\0\f^\0\0\0\x10\0\0\x12\xff\0\0\x5{)
mainwindow\%3C1440x2560%3A3440x1440%3E\1_sidebarContentSplitterSizes=978, 353
mainwindow\%3C1440x2560%3A3440x1440%3E\1_sidebarParentSplitterSizes=393, 1129
mainwindow\%3C1440x2560%3A3440x1440%3E\1_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x2\0\0\0\x1\0\0\0\x80\0\0\x5\x37\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x31\0]\x1\0\0\0\x19\0\0\x3\xa3\0\0\0\x35\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x31\0]\x1\0\0\x3\xc2\0\0\x1\x8e\0\0\0\x15\0\xff\xff\xff\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x1\0\0\0\x1\xfc\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x31\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x15\0\0\0\x15\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfc\0\0\0\0\0\0\0\x80\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\0\0\x6\x1c\0\0\x5\x37\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3A3440x1440%3E\0_dockNesting=true
mainwindow\%3C2560x1440%3A3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\n\x10\0\0\0\x10\0\0\x17_\0\0\x5{\0\0\n\x10\0\0\0\x10\0\0\x17_\0\0\x5{\0\0\0\x1\0\0\0\0\rp\0\0\n\x10\0\0\0\x10\0\0\x17_\0\0\x5{)
mainwindow\%3C2560x1440%3A3440x1440%3E\0_globalAreaContent="{\n\t\"active\" : \"Python Console\",\n\t\"titles\" : \n\t[\n\t\t\"Log\",\n\t\t\"Python Console\"\n\t],\n\t\"type\" : \"tabs\"\n}"
mainwindow\%3C2560x1440%3A3440x1440%3E\0_globalAreaSplitterSizes=868, 434
mainwindow\%3C2560x1440%3A3440x1440%3E\0_globalAreaVisible=true
mainwindow\%3C2560x1440%3A3440x1440%3E\0_sidebarContentSplitterSizes=956, 346
mainwindow\%3C2560x1440%3A3440x1440%3E\0_sidebarParentSplitterSizes=775, 2581
mainwindow\%3C2560x1440%3A3440x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\0\0\0\rP\0\0\x5\x37\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(220 397)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(220 928)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C2560x1440%3A3840x2160%3E\1%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1_dockNesting=true
mainwindow\%3C2560x1440%3A3840x2160%3E\1_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\a\x86\0\0\b\x80\0\0\fo\0\0\r\xeb\0\0\a\x86\0\0\b\x80\0\0\fo\0\0\r\xeb\0\0\0\0\0\0\0\0\n\0\0\0\a\x86\0\0\b\x80\0\0\fo\0\0\r\xeb)
mainwindow\%3C2560x1440%3A3840x2160%3E\1_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\xdc\0\0\x5\x33\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x3\xa0\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\x1\0\0\x3\xc1\0\0\x1\x8d\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\0\x80\0\0\x5\x33\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x31\0]\x1\0\0\0\x1b\0\0\x5\x33\0\0\0\x38\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x31\0]\0\0\0\0\0\0\0\0\x1e\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x2\0\0\0\x2\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfc\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\0\0\x3\x82\0\0\x5\x33\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(220 397)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(63 1331)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(128 29)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(-1 -1)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(220 928)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C2560x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\0_dockNesting=true
mainwindow\%3C2560x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\0\0\0\0\0\n\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{)
mainwindow\%3C2560x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\xcc\0\0\x5\x36\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\0\xb0\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\xd1\0\0\x4\x80\0\0\0\x18\0\xff\xff\xff\0\0\0\x1\0\0\0?\0\0\x5\x36\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5\x33\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5\x36\0\0\0\x18\0\xff\xff\xff\0\0\0\x3\0\0\t\xe0\0\0\0\xe9\xfc\x2\0\0\0\x4\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfc\0\0\x4h\0\0\0\xe9\0\0\0^\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\x4\xcc\0\0\0\x85\0\0\0\x18\0\0\0\x18\0\0\t\xe0\0\0\x4G\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(220 397)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(220 928)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C2560x1440%3E\1%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C2560x1440%3E\1_dockNesting=true
mainwindow\%3C2560x1440%3E\1_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{\0\0\0\0\0\0\0\0\n\0\0\0\0\x10\0\0\0\x10\0\0\t\xef\0\0\x5{)
mainwindow\%3C2560x1440%3E\1_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\xdc\0\0\x5\x33\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x3\xa0\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x31\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\x1\0\0\x3\xc1\0\0\x1\x8d\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\0\x80\0\0\x5\x33\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x31\0]\x1\0\0\0\x1b\0\0\x5\x33\0\0\0\x38\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x31\0]\0\0\0\x5\x34\0\0\0\x1d\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\0\0\0\0\0\0\xfc\x2\0\0\0\x2\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfc\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x31\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\0\0\bx\0\0\x5\x33\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(237 240)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSearch%20Results%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSearch%20Results%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(237 1121)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Breakpoints%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Modules%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Registers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Stack%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Asize%3A=@Size(-1 -1)
mainwindow\%3C3440x1440%3A1440x2560%3E\0%3AOther%20Docks%5CDebugger%20Threads%3Avisibility%3A=false
mainwindow\%3C3440x1440%3A1440x2560%3E\0_dockNesting=true
mainwindow\%3C3440x1440%3A1440x2560%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\x5\xb0\0\0\x2@\0\0\n\x13\0\0\a\xab\0\0\x5\xb0\0\0\x2@\0\0\n\x13\0\0\a\xab\0\0\0\0\0\0\0\0\rp\0\0\x5\xb0\0\0\x2@\0\0\n\x13\0\0\a\xab)
mainwindow\%3C3440x1440%3A1440x2560%3E\0_sidebarContentSplitterSizes=864, 312
mainwindow\%3C3440x1440%3A1440x2560%3E\0_sidebarParentSplitterSizes=366, 716
mainwindow\%3C3440x1440%3A1440x2560%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\x1\x33\0\0\x5\x31\xfc\x2\0\0\0\x3\xfc\0\0\0\x1b\0\0\x2\x93\0\0\0\0\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\x1\0\0\x2\xb4\0\0\x2\x98\0\0\0\0\0\0\0\0\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0S\0t\0\x61\0\x63\0k\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\0\0\0\x1\0\0\x1+\0\0\x5W\xfc\x2\0\0\0\x5\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x3\xc6\0\0\0\x15\0\0\0\x15\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5W\0\0\0\x15\0\0\0\x15\xfb\0\0\0>\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0\x42\0u\0\x66\0\x66\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0\x44\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\0\0\0\x3\0\0\x4\x64\0\0\0\x97\xfc\x1\0\0\0\x5\xfc\0\0\0\0\0\0\x4\x64\0\0\0\x46\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x15\0\0\0\x15\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfc\0\0\x4\xbb\0\0\0\x97\0\0\0[\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0[\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x65\0\x61\0r\0\x63\0h\0 \0R\0\x65\0s\0u\0l\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x15\0\0\0\x15\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0M\0\x65\0m\0o\0r\0y\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\xfb\0\0\0H\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0\x42\0r\0\x65\0\x61\0k\0p\0o\0i\0n\0t\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0<\0\0\0<\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0T\0h\0r\0\x65\0\x61\0\x64\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0<\0\0\0<\xfb\0\0\0@\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x44\0\x65\0\x62\0u\0g\0g\0\x65\0r\0 \0M\0o\0\x64\0u\0l\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0<\0\0\0<\0\0\x4\x64\0\0\x4\x9c\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(307 664)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CReflection%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CReflection%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(307 659)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3440x1440%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Buffers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Memory%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Asize%3A=@Size(0 0)
mainwindow\%3C3440x1440%3E\0%3AOther%20Docks%5CSENinja%20Registers%3Avisibility%3A=false
mainwindow\%3C3440x1440%3E\0_dockNesting=true
mainwindow\%3C3440x1440%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y\0\0\0\0\0\0\0\0\rp\0\0\x6\xba\0\0\0\x13\0\0\r\\\0\0\x5y)
mainwindow\%3C3440x1440%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\x1\x33\0\0\x5\x31\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\x2\x93\0\0\0\x9e\x1\0\0\x1d\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0~\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0\x80\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\x1\0\0\x2\xb4\0\0\x2\x98\0\0\0w\0\xff\xff\xff\0\0\0\x1\0\0\x1+\0\0\x5W\xfc\x2\0\0\0\x4\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x3\xc6\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\x5W\0\0\0\x18\0\0\0\x18\xfb\0\0\0>\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0\x42\0u\0\x66\0\x66\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x42\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0R\0\x65\0g\0i\0s\0t\0\x65\0r\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\0\0\0\x3\0\0\x5j\0\0\0\x97\xfc\x1\0\0\0\x2\xfc\0\0\x1\x39\0\0\x5j\0\0\0\x46\0\xff\xff\xff\xfc\x2\0\0\0\x3\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\0\0\0\0\0\0\0\0\x80\0\0\0\x18\0\0\0\x18\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0R\0\x65\0\x66\0l\0\x65\0\x63\0t\0i\0o\0n\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfc\0\0\x4\xb5\0\0\0\x97\0\0\0^\0\xff\xff\xff\xfa\0\0\0\0\x2\0\0\0\x2\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0^\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\0\0\x18\xfb\0\0\0<\0O\0t\0h\0\x65\0r\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0\x45\0N\0i\0n\0j\0\x61\0 \0M\0\x65\0m\0o\0r\0y\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\0\0\x5j\0\0\x4\x94\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CCross%20References%3Asize%3A=@Size(127 416)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CCross%20References%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CFeature%20Map%3Asize%3A=@Size(63 2071)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CFeature%20Map%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CLog%3Asize%3A=@Size(1259 901)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CLog%3Avisibility%3A=false
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CMini%20Graph%3Asize%3A=@Size(63 29)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CMini%20Graph%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Asize%3A=@Size(0 0)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPinned%20Cross%20References%3Avisibility%3A=false
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPython%20Console%3Asize%3A=@Size(3840 931)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CPython%20Console%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CSymbols%3Asize%3A=@Size(127 1684)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CSymbols%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CTags%3Asize%3A=@Size(127 128)
mainwindow\%3C3840x2160%3E\0%3ANative%20Docks%5CTags%3Avisibility%3A=true
mainwindow\%3C3840x2160%3E\0_dockNesting=true
mainwindow\%3C3840x2160%3E\0_geometry=@ByteArray(\x1\xd9\xd0\xcb\0\x3\0\0\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43\0\0\0\0\0\0\0\0\xf\0\0\0\a\x82\0\0\x4\x31\0\0\xe\xec\0\0\x6\x43)
mainwindow\%3C3840x2160%3E\0_state=@ByteArray(\0\0\0\xff\0\0\0\0\xfd\0\0\0\x3\0\0\0\0\0\0\0\x7f\0\0\a<\xfc\x2\0\0\0\x2\xfc\0\0\0\x1b\0\0\0\xbb\0\0\0\0\0\xff\xff\xff\xfa\xff\xff\xff\xff\x2\0\0\0\x2\xfb\0\0\0\x30\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0S\0y\0m\0\x62\0o\0l\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0*\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0T\0\x61\0g\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x42\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\xdc\0\0\x6{\0\0\0\x18\0\xff\xff\xff\0\0\0\x1\0\0\0?\0\0\a<\xfc\x2\0\0\0\x2\xfb\0\0\0\x38\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0\x46\0\x65\0\x61\0t\0u\0r\0\x65\0 \0M\0\x61\0p\0 \0[\0\x30\0]\0\0\0\0\x1b\0\0\a\x1b\0\0\0\x18\0\xff\xff\xff\xfb\0\0\0\x36\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0M\0i\0n\0i\0 \0G\0r\0\x61\0p\0h\0 \0[\0\x30\0]\0\0\0\a<\0\0\0\x1b\0\0\0\x18\0\xff\xff\xff\0\0\0\x3\0\0\ak\0\0\x1I\xfc\x1\0\0\0\x1\xfc\0\0\0\0\0\0\ak\0\0\0r\0\xff\xff\xff\xfa\0\0\0\x1\x1\0\0\0\x3\xfb\0\0\0(\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0L\0o\0g\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\0\0?\xfb\0\0\0>\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0y\0t\0h\0o\0n\0 \0\x43\0o\0n\0s\0o\0l\0\x65\0 \0[\0\x30\0]\x1\0\0\0\0\xff\xff\xff\xff\0\0\0r\0\xff\xff\xff\xfb\0\0\0P\0N\0\x61\0t\0i\0v\0\x65\0 \0\x44\0o\0\x63\0k\0s\0\\\0P\0i\0n\0n\0\x65\0\x64\0 \0\x43\0r\0o\0s\0s\0 \0R\0\x65\0\x66\0\x65\0r\0\x65\0n\0\x63\0\x65\0s\0 \0[\0\x30\0]\0\0\0\0\0\xff\xff\xff\xff\0\0\0?\0\xff\xff\xff\0\0\ak\0\0\0\x8e\0\0\0\x4\0\0\0\x4\0\0\0\x1\0\0\0\x2\xfc\0\0\0\0)
recentCommands=Snippets – Snippet Editor..., Open Python API Reference..., Add Tag...
recentFiles=/home/novafacing/hub/bitwig-crack/ext/data/opt/bitwig-studio/bitwig-studio, /home/novafacing/hub/symstress/test/binaries/flag.bin, /home/novafacing/hub/symstress/test/binaries/coreutils.bndb, /home/novafacing/hub/ctf/2022realworld/flag/flag.bndb, /home/novafacing/hub/ctf/2022realworld/flag/flag.bin, /home/novafacing/Downloads/hell.bndb, /home/novafacing/Downloads/hell, /home/novafacing/hub/chess/d8, /home/novafacing/hub/ctf/2021r2/game2.bndb, /home/novafacing/hub/ctf/2021r2/game, /home/novafacing/hub/ctf/2021r2/game.bndb, /home/novafacing/hub/ctf/2021sunshine/rust_vm_intel.bndb, /home/novafacing/hub/ctf/2021sunshine/rust_vm_intel, /home/novafacing/hub/ctf/2021csaw/password_checker, /home/novafacing/hub/chess/challenge_bin/devices/rcd.bndb, /home/novafacing/hub/chess/challenge_bin/devices/maint.bndb, /home/novafacing/hub/chess/challenge_bin/devices/fsd.bndb, /home/novafacing/hub/chess/challenge_bin/devices/acd2.bndb, /home/novafacing/hub/chess/challenge_bin/challenge-bak.bndb, /home/novafacing/hub/chess/challenge_bin/challenge.bndb, /home/novafacing/Downloads/challenge.bndb, /home/novafacing/hub/chess/challenge_bin/challenge_tickpatch_debug, /home/novafacing/hub/chess/challenge_bin/challenge_tickpatch, /home/novafacing/hub/chess/challenge_bin/challenge_tickpatch_2, /home/novafacing/hub/chess/challenge_bin/challenge_tickpatch.bndb, /home/novafacing/hub/chess/challenge_bin/challenge, /home/novafacing/hub/chess/diff_files/original/src/lighttpd, /home/novafacing/hub/chess/diff_files/compiled/src/lighttpd, /home/novafacing/hub/chess/diff_files/compiled/src/libs/mod_dirlisting.so, /home/novafacing/hub/chess/diff_files/compiled/src/libs/mod_authn_file.so, /home/novafacing/hub/chess/diff_files/compiled/src/libs/mod_auth.so, /home/novafacing/hub/chess/diff_files/compiled/src/libs/mod_access.so, /home/novafacing/hub/chess/diff_files/compiled/src/libs/mod_userdir.so, /home/novafacing/hub/chess/diff_files/compiled/src/libs/mod_usertrack.so, /home/novafacing/hub/chess/diff_files/original/src/libs/mod_access.so, /home/novafacing/hub/chess/diff_files/original/src/libs/mod_dirlisting.so, /home/novafacing/hub/chess/diff_files/original/src/libs/mod_usertrack.so, /home/novafacing/hub/chess/diff_files/original/src/libs/mod_authn_file.so, /home/novafacing/hub/chess/diff_files/original/src/libs/mod_auth.so, /home/novafacing/hub/chess/diff_files/original/src/libs/mod_userdir.so
stackAdjustSizeHistory=8, 64, 0x0, 0x16, 0x4
typeDialogHistory=int64_t Run(Game * g), Game *, struct Game * game, Vec *, Vec * v, RawVec *, Vec, vm *, int16_t r0, int64_t *, int64_t, char[], char *, struct rc* rc, rc *, uint64_t, "int64_t  vm_get_buf(struct vm* vm, int32_t read_addr, char* buf, int32_t size)", "int64_t  vm_set_buf(struct vm* vm, int32_t write_addr, char* data, int32_t size)", "int64_t  vm_set_u32(struct vm* vm, int32_t write_addr, int32_t value)", "int64_t  vm_set_u16(struct vm* vm, int32_t write_addr, uint16_t data)", "int64_t  vm_set_u8(struct vm* vm, int32_t write_addr, char data)", "int64_t  vm_set_u8(vm * vm, int32_t write_addr, char data)", struct r5_instruction* instr_2, struct r5_instruction* instr_1, r5_instruction * instr, char * cur_instr_str, uint64_t __unk, vm * vm, struct r5_instruction * instr, char * buf, "int64_t  r5_decode(uint32_t rs1, struct r5_instruction *instr)", char const [0x3], char const [0x4], char const [0x5], char const [0x6], char const [0xb], char const [0xa], char const [0x8], char const [0x7], char const [0x9], "char const[7];", "char const[6];", "char const[4];", "char const[5];", struct strtab_entry result_strings[32], "char const wfi_str[4];", struct strtab_entry result_strings[66], struct result_string result_strings[0x12], "result_string result_strings[17];", "uint8_t * result_strings[8];"
typeNameHistory=level, sz, buf, mem, "mem_size;", strtab_entry, enabled, member_0x132, debug, mtimecmp, mtime, "DEVICE_TYPE_DEBUG = 1", "DEVICE_TYPE_DEBUG = 0x1000000000", "DEVICE_TYPE_BUS = 0", fill, attr2, attr1, attr0
